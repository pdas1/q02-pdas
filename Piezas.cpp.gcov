        -:    0:Source:Piezas.cpp
        -:    0:Graph:Piezas.gcno
        -:    0:Data:Piezas.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "Piezas.h"
        -:    2:#include <iostream>
        -:    3:#include <vector>
        -:    4:using namespace std;
        -:    5:/** CLASS Piezas
        -:    6: * Class for representing a Piezas vertical board, which is roughly based
        -:    7: * on the game "Connect Four" where pieces are placed in a column and 
        -:    8: * fall to the bottom of the column, or on top of other pieces already in
        -:    9: * that column. For an illustration of the board, see:
        -:   10: *  https://en.wikipedia.org/wiki/Connect_Four
        -:   11: *
        -:   12: * Board coordinates [row,col] should match with:
        -:   13: * [2,0][2,1][2,2][2,3]
        -:   14: * [1,0][1,1][1,2][1,3]
        -:   15: * [0,0][0,1][0,2][0,3]
        -:   16: * So that a piece dropped in column 2 should take [0,2] and the next one
        -:   17: * dropped in column 2 should take [1,2].
        -:   18:**/
        -:   19:
        -:   20:
        -:   21:/**
        -:   22: * Constructor sets an empty board (default 3 rows, 4 columns) and 
        -:   23: * specifies it is X's turn first
        -:   24:**/
function _ZN6PiezasC2Ev called 44 returned 100% blocks executed 57%
       44:   25:Piezas::Piezas() {
call    0 returned 44
call    1 never executed
       44:   26:  turn=X;
       44:   27:  board.resize(BOARD_ROWS, std::vector<Piece>(BOARD_COLS, Blank));
call    0 returned 44
call    1 returned 44
branch  2 taken 44 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 44
branch  5 taken 44 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 44
branch  8 taken 44 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 44
call   11 never executed
call   12 never executed
       44:   28:}
        -:   29:
        -:   30:/**
        -:   31: * Resets each board location to the Blank Piece value, with a board of the
        -:   32: * same size as previously specified
        -:   33:**/
function _ZN6Piezas5resetEv called 13 returned 100% blocks executed 100%
       13:   34:void Piezas::reset() {
       52:   35:  for(int i=0;i<BOARD_ROWS;i++) {
branch  0 taken 39
branch  1 taken 13 (fallthrough)
      195:   36:    for(int j=0;j<BOARD_COLS;j++) {
branch  0 taken 156
branch  1 taken 39 (fallthrough)
      156:   37:      board[i][j]=Blank;
call    0 returned 156
call    1 returned 156
        -:   38:    }
        -:   39:  }
       13:   40:}
function _ZN6Piezas10switchTurnEv called 192 returned 100% blocks executed 100%
      192:   41:Piece Piezas::switchTurn() {
      192:   42:  if (turn==X) {
branch  0 taken 102 (fallthrough)
branch  1 taken 90
      102:   43:   turn=O;
        -:   44:  }
        -:   45:  else {
       90:   46:   turn=X;
        -:   47:  }
      192:   48:  return turn;
        -:   49:}
        -:   50:/**
        -:   51: * Places a piece of the current turn on the board, returns what
        -:   52: * piece is placed, and toggles which Piece's turn it is. dropPiece does 
        -:   53: * NOT allow to place a piece in a location where a column is full.
        -:   54: * In that case, placePiece returns Piece Blank value 
        -:   55: * Out of bounds coordinates return the Piece Invalid value
        -:   56: * Trying to drop a piece where it cannot be placed loses the player's turn
        -:   57:**/ 
function _ZN6Piezas9dropPieceEi called 188 returned 100% blocks executed 100%
      188:   58:Piece Piezas::dropPiece(int column) {
      188:   59:  Piece ret=turn;
      188:   60:  if(column>BOARD_COLS-1) {
branch  0 taken 4 (fallthrough)
branch  1 taken 184
        4:   61:    switchTurn();
call    0 returned 4
        4:   62:    return Invalid;
        -:   63:  }
      184:   64:  if(board[0][column]!=Blank) {
call    0 returned 184
call    1 returned 184
branch  2 taken 4 (fallthrough)
branch  3 taken 180
        4:   65:     switchTurn();
call    0 returned 4
        4:   66:     return Blank;   
        -:   67:  }
      180:   68:  if(board[2][column]==Blank) {
call    0 returned 180
call    1 returned 180
branch  2 taken 68 (fallthrough)
branch  3 taken 112
       68:   69:    board[2][column]=turn;
call    0 returned 68
call    1 returned 68
       68:   70:    ret=turn;
       68:   71:    switchTurn();
call    0 returned 68
        -:   72:  }
      112:   73:  else if(board[1][column]==Blank) {
call    0 returned 112
call    1 returned 112
branch  2 taken 56 (fallthrough)
branch  3 taken 56
       56:   74:    board[1][column]=turn;
call    0 returned 56
call    1 returned 56
       56:   75:    ret=turn;
       56:   76:    switchTurn();
call    0 returned 56
        -:   77:  }
       56:   78:  else if(board[0][column]==Blank) {
call    0 returned 56
call    1 returned 56
branch  2 taken 56 (fallthrough)
branch  3 taken 0
       56:   79:   board[0][column]=turn;
call    0 returned 56
call    1 returned 56
       56:   80:   ret=turn;
       56:   81:   switchTurn();
call    0 returned 56
        -:   82:  }
        -:   83:
        -:   84: /* for(int i=BOARD_ROWS-1;i>=0;i--) {
        -:   85:    if(board[i][column]==Blank) {
        -:   86:      board[i][column]=turn;
        -:   87:      ret=turn;
        -:   88:      switchTurn();
        -:   89:    }
        -:   90:   }*/
      180:   91:   return ret;    
        -:   92:}
        -:   93:
        -:   94:/**
        -:   95: * Returns what piece is at the provided coordinates, or Blank if there
        -:   96: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   97:**/
function _ZN6Piezas7pieceAtEii called 63 returned 100% blocks executed 100%
       63:   98:Piece Piezas::pieceAt(int row, int column) {
       63:   99:  if(row<0 || row>BOARD_ROWS-1 || column<0 || column>BOARD_COLS-1) {
branch  0 taken 63 (fallthrough)
branch  1 taken 0
branch  2 taken 63 (fallthrough)
branch  3 taken 0
branch  4 taken 63 (fallthrough)
branch  5 taken 0
branch  6 taken 3 (fallthrough)
branch  7 taken 60
        3:  100:    return Invalid;
        -:  101:  }
       60:  102:    return board[row][column];
call    0 returned 60
call    1 returned 60
        -:  103:}
        -:  104:
        -:  105:/**
        -:  106: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:  107: * is not over, or Blank if the board is filled and no one has won ("tie").
        -:  108: * For a game to be over, all locations on the board must be filled with X's 
        -:  109: * and O's (i.e. no remaining Blank spaces). The winner is which player has
        -:  110: * the most adjacent pieces in a single line. Lines can go either vertically
        -:  111: * or horizontally. If both X's and O's have the same max number of pieces in a
        -:  112: * line, it is a tie.
        -:  113:**/
function _ZN6Piezas9gameStateEv called 17 returned 100% blocks executed 100%
       17:  114:Piece Piezas::gameState() {
       17:  115:  bool gameTest=true;
       17:  116:  int countx=0; int counto=0;
       17:  117:  int adjx=0; int adjo=0;
       68:  118:  for(int i=0;i<BOARD_ROWS;i++) {
branch  0 taken 51
branch  1 taken 17 (fallthrough)
      255:  119:    for(int j=0;j<BOARD_COLS;j++) {
branch  0 taken 204
branch  1 taken 51 (fallthrough)
      204:  120:      if(board[i][j]==Blank) {
call    0 returned 204
call    1 returned 204
branch  2 taken 48 (fallthrough)
branch  3 taken 156
       48:  121:        gameTest=false;
        -:  122:      }
        -:  123:    }
        -:  124:  }
       17:  125:  if(gameTest==false) {
branch  0 taken 4 (fallthrough)
branch  1 taken 13
        4:  126:    return Invalid;
        -:  127:  }
       52:  128:  for(int i=0;i<BOARD_ROWS;i++)
branch  0 taken 39
branch  1 taken 13 (fallthrough)
        -:  129:  {
      195:  130:    for(int j=0;j<BOARD_COLS;j++)
branch  0 taken 156
branch  1 taken 39 (fallthrough)
        -:  131:    {
      156:  132:      if(board[i][j]==O)
call    0 returned 156
call    1 returned 156
branch  2 taken 78 (fallthrough)
branch  3 taken 78
        -:  133:      {
       78:  134:        counto++;
       78:  135:        if(counto>adjo) {
branch  0 taken 26 (fallthrough)
branch  1 taken 52
       26:  136:          adjo=counto;
        -:  137:        }
       78:  138:        countx=0;
        -:  139:      }
        -:  140:      else {
       78:  141:        countx++;
       78:  142:        if(countx>adjx)
branch  0 taken 29 (fallthrough)
branch  1 taken 49
       29:  143:          adjx=countx;
       78:  144:        counto=0;
        -:  145:      }
        -:  146:    }
       39:  147:    countx=0; counto=0;
        -:  148:  }
       13:  149:  countx=0; counto=0;
       65:  150:  for(int j=0;j<BOARD_COLS;j++) {
branch  0 taken 52
branch  1 taken 13 (fallthrough)
      208:  151:    for(int i=0;i<BOARD_ROWS;i++) {
branch  0 taken 156
branch  1 taken 52 (fallthrough)
      156:  152:      if(board[i][j]==O)
call    0 returned 156
call    1 returned 156
branch  2 taken 78 (fallthrough)
branch  3 taken 78
        -:  153:      {
       78:  154:        counto++;
       78:  155:        if(counto>adjo)
branch  0 taken 4 (fallthrough)
branch  1 taken 74
        4:  156:          adjo=counto;
       78:  157:        countx=0;
        -:  158:      }
        -:  159:      else {
       78:  160:        countx++;
       78:  161:        if(countx>adjx)
branch  0 taken 2 (fallthrough)
branch  1 taken 76
        2:  162:          adjx=countx;
       78:  163:        counto=0;
        -:  164:      }
        -:  165:    }
       52:  166:    countx=0; counto=0;
        -:  167:  }
       13:  168:  if(adjx>adjo)
branch  0 taken 5 (fallthrough)
branch  1 taken 8
        5:  169:    return X;
        8:  170:  else if(adjo>adjx)
branch  0 taken 4 (fallthrough)
branch  1 taken 4
        4:  171:    return O;
        -:  172:  else
        4:  173:    return Blank;
        -:  174:  return Blank;
function _GLOBAL__sub_I__ZN6PiezasC2Ev called 4 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 4 returned 100% blocks executed 100%
       12:  175:}  
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
branch  3 taken 4 (fallthrough)
branch  4 taken 0
        -:  176:
